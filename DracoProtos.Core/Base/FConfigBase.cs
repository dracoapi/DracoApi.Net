using System.Collections.Generic;
using DracoProtos.Core.Enums;
using DracoProtos.Core.Objects;
using DracoProtos.Core.Serializer;

namespace DracoProtos.Core.Base
{
    public abstract class FConfigBase : FBaseItemUpdate
	{
        public float actionInfoShowDuration;
        public float activeTimeAllowedInBackgroundDuration;
        public float aggressiveChanceToAttack;
        public float aggressiveChanceToJump;
        public float aggressiveChancesCooldownTime;
        public int altarAvailableFromLevel;
        public float angularDrag;
        public int[] arenaLayerLevels;
        public int[] arenaLevelsThreshold;
        public Dictionary<ArtifactName, int> artifactSellPrice;
        public float avatarMoveExtrapolationMaxRunawayDistance;
        public int avatarMoveMaxDistanceRun;
        public float avatarMoveMaxMoveDuration;
        public float avatarMoveReturnToRealPositionDuration;
        public float avatarMoveReturnToRealPositionTimeout;
        public int avatarMoveRunSpeed;
        public float ballCurve;
        public float bottomSwipeScreenPart;
        public float[] buildingsVisibilityDistanceLevels;
        public int buildingsVisionRadius;
        public float cameraFieldOfView;
        public SortedDictionary<float, string> catchPopup;
        public Dictionary<string, string> clientTexts;
        public bool collectorRatingButtonVisibleToAll;
        public int[] congratulationLayerLevels;
        public int contestAvailableFromLevel;
        public bool contestVisibleToAll;
        public float contestVisionRadius;
        public int creaturesDelayVisibility;
        public int dailyQuestAvailableFromLevel;
        public bool defaultAugmentedRealitySwitchState;
        public int defenderBaseAttackBeforeChargedMax;
        public int defenderBaseAttackBeforeChargedMin;
        public float delayForCheckMaxSpeedToPlay;
        public float delayToDisableGameBecauseOfLowGPSAccuracy;
        public float desiredGpsAccuracy;
        public float distanceToLoadTiles;
        public float distanceToUnloadTiles;
        public bool emulatorCheckEnabled;
        public int encounterDelayBeforeExtraEncounter;
        public int[] encounterNeededActiveUserTime;
        public float fogEndDistance;
        public float fogStartDistance;
        public float goOrbitDistance;
        public float goOrbitDistanceMax;
        public float goOrbitDistanceMin;
        public float goOrbitHeightMaxLimit;
        public float goOrbitHeightMinLimit;
        public float goOrbitOffsetMax; 
        public float goOrbitOffsetMin;
        public float highSpeedDurationRequiredForWarning;
        public bool maintenanceEnabled;
        public string mapServer;
        public int mapVersion;
        public int maxAngularVelocity;
        public float maxClientPauseDuration;
        public float maxSpeedForUse;
        public int maxSpeedToPlay;
        public bool mentorChooseEnabled;
        public bool mentorshipEnabled;
        public int minFPS;
        public float minFPSMeasureDurationSec;
        public float monsterLevelPerUserLevel;
        public int monsterMaxLevel;
        public float newsCheckIntervalSeconds;
        public HashSet<sbyte> notEmulatorModelHashes; //TODO:
        public float oppositeDodgeTimeoutSeconds;
        public Dictionary<PersonalizedStop, int> personalizationPriceMap;
        public PotionConfig potionConfig;
        public double radarVisionRadius;
        public Dictionary<RecipeType, List<object>> recipes;
        public float requestRetryDelay;
        public float screenDifferentSwipeDivision;
        public float spinGain;
        public float stopLootStreakDuration;
        public int stopUsageHintTillLevel;
        public float superVisionEffectInterval; 
        public int superVisionRadius;
        public float throwSensitivity;
        public float timeLimitPerDefender;
        public float topSwipeScreenPart;
        public int updateRequestCooldownSeconds;
        public int updateRequestIgnoreWorseAccuracyCooldownSeconds;
        public int updateRequestMinimalDistance;
        public int updateRequestPeriodSeconds;
        public int weeklyQuestAvailableFromLevel;
        public int wizardAvailableFromLevel;
        public bool wizardRatingButtonVisibleToAll;
        public float worldScreenBuffDisplayMaxDurationTimeSeconds;
        public float xVelocityFactor;
        public float xVelocityFactorSpin;
        public float yVelocityFactor;

        public override void ReadExternal(FInputStream stream)
		{
			base.ReadExternal(stream);
            this.actionInfoShowDuration = stream.ReadFloat();
            this.activeTimeAllowedInBackgroundDuration = stream.ReadFloat();
            this.aggressiveChanceToAttack = stream.ReadFloat();
            this.aggressiveChanceToJump = stream.ReadFloat();
            this.aggressiveChancesCooldownTime = stream.ReadFloat();
            this.altarAvailableFromLevel = stream.ReadInt32();
            this.angularDrag = stream.ReadFloat();
            this.arenaLayerLevels = stream.ReadStaticArray<int>(true);
            this.arenaLevelsThreshold = stream.ReadStaticArray<int>(true);
            this.artifactSellPrice = stream.ReadStaticMap<ArtifactName, int>(true, true);
            this.avatarMoveExtrapolationMaxRunawayDistance = stream.ReadFloat();
            this.avatarMoveMaxDistanceRun = stream.ReadInt32();
            this.avatarMoveMaxMoveDuration = stream.ReadFloat();
            this.avatarMoveReturnToRealPositionDuration = stream.ReadFloat();
            this.avatarMoveReturnToRealPositionTimeout = stream.ReadFloat();
            this.avatarMoveRunSpeed = stream.ReadInt32();
            this.ballCurve = stream.ReadFloat();
            this.bottomSwipeScreenPart = stream.ReadFloat();
            this.buildingsVisibilityDistanceLevels = stream.ReadStaticArray<float>(true);
            this.buildingsVisionRadius = stream.ReadInt32();
            this.cameraFieldOfView = stream.ReadFloat();
            this.catchPopup = stream.ReadStaticSortedMap<float, string>(true, true);
            this.clientTexts = stream.ReadStaticMap<string, string>(true, true);
            this.collectorRatingButtonVisibleToAll = stream.ReadBoolean();
            this.congratulationLayerLevels = stream.ReadStaticArray<int>(true);
            this.contestAvailableFromLevel = stream.ReadInt32();
            this.contestVisibleToAll = stream.ReadBoolean();
            this.contestVisionRadius = stream.ReadFloat();
            this.creaturesDelayVisibility = stream.ReadInt32();
            this.dailyQuestAvailableFromLevel = stream.ReadInt32();
            this.defaultAugmentedRealitySwitchState = stream.ReadBoolean();
            this.defenderBaseAttackBeforeChargedMax = stream.ReadInt32();
            this.defenderBaseAttackBeforeChargedMin = stream.ReadInt32();
            this.delayForCheckMaxSpeedToPlay = stream.ReadFloat();
            this.delayToDisableGameBecauseOfLowGPSAccuracy = stream.ReadFloat();
            this.desiredGpsAccuracy = stream.ReadFloat();
            this.distanceToLoadTiles = stream.ReadFloat();
            this.distanceToUnloadTiles = stream.ReadFloat();
            this.emulatorCheckEnabled = stream.ReadBoolean();
            this.encounterDelayBeforeExtraEncounter = stream.ReadInt32();
            this.encounterNeededActiveUserTime = stream.ReadStaticArray<int>(true);
            this.fogEndDistance = stream.ReadFloat();
            this.fogStartDistance = stream.ReadFloat();
            this.goOrbitDistance = stream.ReadFloat();
            this.goOrbitDistanceMax = stream.ReadFloat();
            this.goOrbitDistanceMin = stream.ReadFloat();
            this.goOrbitHeightMaxLimit = stream.ReadFloat();
            this.goOrbitHeightMinLimit = stream.ReadFloat();
            this.goOrbitOffsetMax = stream.ReadFloat();
            this.goOrbitOffsetMin = stream.ReadFloat();
            this.highSpeedDurationRequiredForWarning = stream.ReadFloat();
            this.maintenanceEnabled = stream.ReadBoolean();
            this.mapServer = stream.ReadUtfString();
            this.mapVersion = stream.ReadInt32();
            this.maxAngularVelocity = stream.ReadInt32();
            this.maxClientPauseDuration = stream.ReadFloat();
            this.maxSpeedForUse = stream.ReadFloat();
            this.maxSpeedToPlay = stream.ReadInt32();
            this.mentorChooseEnabled = stream.ReadBoolean();
            this.mentorshipEnabled = stream.ReadBoolean();
            this.minFPS = stream.ReadInt32();
            this.minFPSMeasureDurationSec = stream.ReadFloat();
            this.monsterLevelPerUserLevel = stream.ReadFloat();
            this.monsterMaxLevel = stream.ReadInt32();
            this.newsCheckIntervalSeconds = stream.ReadFloat();
            this.notEmulatorModelHashes = stream.ReadStaticHashSet<sbyte>(true); //TODO:
            this.oppositeDodgeTimeoutSeconds = stream.ReadFloat();
            this.personalizationPriceMap = stream.ReadStaticMap<PersonalizedStop, int>(true, true);
            this.potionConfig = (PotionConfig)stream.ReadStaticObject(typeof(PotionConfig));
            this.radarVisionRadius = stream.ReadDouble();
            this.recipes = stream.ReadStaticMap<RecipeType, List<object>>(true, true);
            this.requestRetryDelay = stream.ReadFloat();
            this.screenDifferentSwipeDivision = stream.ReadFloat();
            this.spinGain = stream.ReadFloat();
            this.stopLootStreakDuration = stream.ReadFloat();
            this.stopUsageHintTillLevel = stream.ReadInt32();
            this.superVisionEffectInterval = stream.ReadFloat();
            this.superVisionRadius = stream.ReadInt32();
            this.throwSensitivity = stream.ReadFloat();
            this.timeLimitPerDefender = stream.ReadFloat();
            this.topSwipeScreenPart = stream.ReadFloat();
            this.updateRequestCooldownSeconds = stream.ReadInt32();
            this.updateRequestIgnoreWorseAccuracyCooldownSeconds = stream.ReadInt32();
            this.updateRequestMinimalDistance = stream.ReadInt32();
            this.updateRequestPeriodSeconds = stream.ReadInt32();
            this.weeklyQuestAvailableFromLevel = stream.ReadInt32();
            this.wizardAvailableFromLevel = stream.ReadInt32();
            this.wizardRatingButtonVisibleToAll = stream.ReadBoolean();
            this.worldScreenBuffDisplayMaxDurationTimeSeconds = stream.ReadFloat();
            this.xVelocityFactor = stream.ReadFloat();
            this.xVelocityFactorSpin = stream.ReadFloat();
            this.yVelocityFactor = stream.ReadFloat();
        }

		public override void WriteExternal(FOutputStream stream)
		{
			base.WriteExternal(stream);
            stream.WriteFloat(this.actionInfoShowDuration);
            stream.WriteFloat(this.activeTimeAllowedInBackgroundDuration);
            stream.WriteFloat(this.aggressiveChanceToAttack);
            stream.WriteFloat(this.aggressiveChanceToJump);
            stream.WriteFloat(this.aggressiveChancesCooldownTime);
            stream.WriteInt32(this.altarAvailableFromLevel);
            stream.WriteFloat(this.angularDrag);
            stream.WriteStaticEnumerable(this.arenaLayerLevels, true);
            stream.WriteStaticEnumerable(this.arenaLevelsThreshold, true);
            stream.WriteStaticMap(this.artifactSellPrice, true, true);
            stream.WriteFloat(this.avatarMoveExtrapolationMaxRunawayDistance);
            stream.WriteInt32(this.avatarMoveMaxDistanceRun);
            stream.WriteFloat(this.avatarMoveMaxMoveDuration);
            stream.WriteFloat(this.avatarMoveReturnToRealPositionDuration);
            stream.WriteFloat(this.avatarMoveReturnToRealPositionTimeout);
            stream.WriteInt32(this.avatarMoveRunSpeed);
            stream.WriteFloat(this.ballCurve);
            stream.WriteFloat(this.bottomSwipeScreenPart);
            stream.WriteStaticEnumerable(this.buildingsVisibilityDistanceLevels, true);
            stream.WriteInt32(this.buildingsVisionRadius);
            stream.WriteFloat(this.cameraFieldOfView);
            stream.WriteStaticMap(this.catchPopup, true, true);
            stream.WriteStaticMap(this.clientTexts, true, true);
            stream.WriteBoolean(this.collectorRatingButtonVisibleToAll);
            stream.WriteStaticEnumerable(this.congratulationLayerLevels, true);
            stream.WriteInt32(this.contestAvailableFromLevel);
            stream.WriteBoolean(this.contestVisibleToAll);
            stream.WriteFloat(this.contestVisionRadius);
            stream.WriteInt32(this.creaturesDelayVisibility);
            stream.WriteInt32(this.dailyQuestAvailableFromLevel);
            stream.WriteBoolean(this.defaultAugmentedRealitySwitchState);
            stream.WriteInt32(this.defenderBaseAttackBeforeChargedMax);
            stream.WriteInt32(this.defenderBaseAttackBeforeChargedMin);
            stream.WriteFloat(this.delayForCheckMaxSpeedToPlay);
            stream.WriteFloat(this.delayToDisableGameBecauseOfLowGPSAccuracy);
            stream.WriteFloat(this.desiredGpsAccuracy);
            stream.WriteFloat(this.distanceToLoadTiles);
            stream.WriteFloat(this.distanceToUnloadTiles);
            stream.WriteBoolean(this.emulatorCheckEnabled);
            stream.WriteInt32(this.encounterDelayBeforeExtraEncounter);
            stream.WriteStaticEnumerable(this.encounterNeededActiveUserTime, true);
            stream.WriteFloat(this.fogEndDistance);
            stream.WriteFloat(this.fogStartDistance);
            stream.WriteFloat(this.goOrbitDistance);
            stream.WriteFloat(this.goOrbitDistanceMax);
            stream.WriteFloat(this.goOrbitDistanceMin);
            stream.WriteFloat(this.goOrbitHeightMaxLimit);
            stream.WriteFloat(this.goOrbitHeightMinLimit);
            stream.WriteFloat(this.goOrbitOffsetMax);
            stream.WriteFloat(this.goOrbitOffsetMin);
            stream.WriteFloat(this.highSpeedDurationRequiredForWarning);
            stream.WriteBoolean(this.maintenanceEnabled);
            stream.WriteUtfString(this.mapServer);
            stream.WriteInt32(this.mapVersion);
            stream.WriteInt32(this.maxAngularVelocity);
            stream.WriteFloat(this.maxClientPauseDuration);
            stream.WriteFloat(this.maxSpeedForUse);
            stream.WriteInt32(this.maxSpeedToPlay);
            stream.WriteBoolean(this.mentorChooseEnabled);
            stream.WriteBoolean(this.mentorshipEnabled);
            stream.WriteInt32(this.minFPS);
            stream.WriteFloat(this.minFPSMeasureDurationSec);
            stream.WriteFloat(this.monsterLevelPerUserLevel);
            stream.WriteInt32(this.monsterMaxLevel);
            stream.WriteFloat(this.newsCheckIntervalSeconds);
            stream.WriteDynamicObject(this.notEmulatorModelHashes); //TODO:
            stream.WriteFloat(this.oppositeDodgeTimeoutSeconds);
            stream.WriteStaticMap(this.personalizationPriceMap, true, true);
            stream.WriteStaticObject(this.potionConfig);
            stream.WriteDouble(this.radarVisionRadius);
            stream.WriteStaticMap(this.recipes, true, true);
            stream.WriteFloat(this.requestRetryDelay);
            stream.WriteFloat(this.screenDifferentSwipeDivision);
            stream.WriteFloat(this.spinGain);
            stream.WriteFloat(this.stopLootStreakDuration);
            stream.WriteInt32(this.stopUsageHintTillLevel);
            stream.WriteFloat(this.superVisionEffectInterval);
            stream.WriteInt32(this.superVisionRadius);
            stream.WriteFloat(this.throwSensitivity);
            stream.WriteFloat(this.timeLimitPerDefender);
            stream.WriteFloat(this.topSwipeScreenPart);
            stream.WriteInt32(this.updateRequestCooldownSeconds);
            stream.WriteInt32(this.updateRequestIgnoreWorseAccuracyCooldownSeconds);
            stream.WriteInt32(this.updateRequestMinimalDistance);
            stream.WriteInt32(this.updateRequestPeriodSeconds);
            stream.WriteInt32(this.weeklyQuestAvailableFromLevel);
            stream.WriteInt32(this.wizardAvailableFromLevel);
            stream.WriteBoolean(this.wizardRatingButtonVisibleToAll);
            stream.WriteFloat(this.worldScreenBuffDisplayMaxDurationTimeSeconds);
            stream.WriteFloat(this.xVelocityFactor);
            stream.WriteFloat(this.xVelocityFactorSpin);
            stream.WriteFloat(this.yVelocityFactor);
        }
	}
}
